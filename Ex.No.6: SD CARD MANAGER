Ex.No.6: SD CARD MANAGER 
 
activity_main.xml: 
 
<?xml version="1.0" encoding="utf-8"?> 
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" 
    android:layout_width="match_parent" 
    android:layout_height="match_parent" 
    android:orientation="vertical" 
    android:padding="16dp" 
    android:gravity="center"> 
 
    <!-- EditText for user input --> 
    <EditText 
        android:id="@+id/editText" 
        android:layout_width="match_parent" 
        android:layout_height="wrap_content" 
        android:hint="Enter text to write to SD card" 
        android:inputType="text" 
        android:layout_marginBottom="20dp" 
        android:gravity="center"/> 
 
    <!-- Button to write input to SD card --> 
    <Button 
        android:id="@+id/writeButton" 
        android:layout_width="wrap_content" 
        android:layout_height="wrap_content" 
        android:text="Write to SD Card" 
        android:layout_marginBottom="20dp" 
        android:gravity="center"/> 
 
    <!-- Button to read the file from SD card --> 
    <Button 
        android:id="@+id/readButton" 
        android:layout_width="wrap_content" 
        android:layout_height="wrap_content" 
        android:text="Read from SD Card" 
        android:gravity="center"/> 
 
    <!-- TextView to display the result or error message --> 
    <TextView 
        android:id="@+id/textView" 
        android:layout_width="wrap_content" 
        android:layout_height="wrap_content" 
        android:text="Output will be displayed here" 
        android:layout_marginTop="20dp" 
        android:gravity="center"/> 
 
</LinearLayout> 
 

MainActivity.java: 
 
package com.example.sdcard; 
 
import androidx.appcompat.app.AppCompatActivity; 
import android.Manifest; 
import android.content.pm.PackageManager; 
import android.os.Bundle; 
import android.os.Environment; 
import android.view.View; 
import android.widget.Button; 
import android.widget.EditText; 
import android.widget.TextView; 
import android.widget.Toast; 
import androidx.core.app.ActivityCompat; 
import androidx.core.content.ContextCompat; 
 
import java.io.File; 
import java.io.FileInputStream; 
import java.io.FileOutputStream; 
import java.io.IOException; 
 
public class MainActivity extends AppCompatActivity { 
 
    private static final int REQUEST_PERMISSION_CODE = 100; 
    private TextView textView; 
    private EditText editText; 
 
    @Override 
    protected void onCreate(Bundle savedInstanceState) { 
        super.onCreate(savedInstanceState); 
        setContentView(R.layout.activity_main); 
 
        textView = findViewById(R.id.textView); 
        editText = findViewById(R.id.editText); 
        Button readButton = findViewById(R.id.readButton); 
        Button writeButton = findViewById(R.id.writeButton); 
 
        // Check for permissions 
        if (ContextCompat.checkSelfPermission(this, 
Manifest.permission.READ_EXTERNAL_STORAGE) != 
PackageManager.PERMISSION_GRANTED 
                || ContextCompat.checkSelfPermission(this, 
Manifest.permission.WRITE_EXTERNAL_STORAGE) != 
PackageManager.PERMISSION_GRANTED) { 
            ActivityCompat.requestPermissions(this, 
                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, 
Manifest.permission.WRITE_EXTERNAL_STORAGE}, 
                    REQUEST_PERMISSION_CODE); 
        } 
 
        // Write File Button 
        writeButton.setOnClickListener(v -> { 
            String userInput = editText.getText().toString(); 
            if (!userInput.isEmpty()) { 
                writeToSDCard(userInput); 
            } else { 
                Toast.makeText(MainActivity.this, "Please enter some text to write", 
Toast.LENGTH_SHORT).show(); 
            } 
        }); 
 
        // Read File Button 
        readButton.setOnClickListener(v -> readFromSDCard()); 
    } 
 
    // Request permissions result 
    @Override 
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] 
grantResults) { 
        super.onRequestPermissionsResult(requestCode, permissions, grantResults); 
        if (requestCode == REQUEST_PERMISSION_CODE) { 
            if (grantResults.length > 0 && grantResults[0] == 
PackageManager.PERMISSION_GRANTED) { 
                Toast.makeText(this, "Permissions granted", Toast.LENGTH_SHORT).show(); 
            } else { 
                Toast.makeText(this, "Permissions denied", Toast.LENGTH_SHORT).show(); 
            } 
        } 
    } 
 
    // Write data to SD Card 
    private void writeToSDCard(String data) { 
        if (isExternalStorageWritable()) { 
            File directory = new File(getExternalFilesDir(null), "MyAppFolder"); 
            if (!directory.exists()) { 
                directory.mkdirs(); 
            } 
            File file = new File(directory, "myfile.txt"); 
 
            try (FileOutputStream fos = new FileOutputStream(file)) { 
                fos.write(data.getBytes()); 
                textView.setText("Data written to SD Card."); 
            } catch (IOException e) { 
                e.printStackTrace(); 
                textView.setText("Error writing to file."); 
            } 
        } else { 
            textView.setText("External Storage not available."); 
        } 
    } 
 
    // Read data from SD Card 
    private void readFromSDCard() { 
        if (isExternalStorageReadable()) { 
            File directory = new File(getExternalFilesDir(null), "MyAppFolder"); 
            File file = new File(directory, "myfile.txt"); 
 
            if (file.exists()) { 
                try (FileInputStream fis = new FileInputStream(file)) { 
                    byte[] data = new byte[(int) file.length()]; 
                    fis.read(data); 
                    textView.setText(new String(data)); 
                } catch (IOException e) { 
                    e.printStackTrace(); 
                    textView.setText("Error reading from file."); 
                } 
            } else { 
                textView.setText("File not found."); 
            } 
        } else { 
            textView.setText("External Storage not available."); 
        } 
    } 
 
    // Check if external storage is writable 
    private boolean isExternalStorageWritable() { 
        String state = Environment.getExternalStorageState(); 
        return Environment.MEDIA_MOUNTED.equals(state); 
    } 
 
    // Check if external storage is readable 
    private boolean isExternalStorageReadable() { 
        String state = Environment.getExternalStorageState(); 
        return Environment.MEDIA_MOUNTED.equals(state) || 
Environment.MEDIA_MOUNTED_READ_ONLY.equals(state); 
    } 
} 
 

AndroidManifest.xml: 
 
package com.example.sdcard; 
 
import androidx.appcompat.app.AppCompatActivity; 
import android.Manifest; 
import android.content.pm.PackageManager; 
import android.os.Bundle; 
import android.os.Environment; 
import android.view.View; 
import android.widget.Button; 
import android.widget.EditText; 
import android.widget.TextView; 
import android.widget.Toast; 
import androidx.core.app.ActivityCompat; 
import androidx.core.content.ContextCompat; 
 
import java.io.File; 
import java.io.FileInputStream; 
import java.io.FileOutputStream; 
import java.io.IOException; 
 
public class MainActivity extends AppCompatActivity { 
 
    private static final int REQUEST_PERMISSION_CODE = 100; 
    private TextView textView; 
    private EditText editText; 
 
    @Override 
    protected void onCreate(Bundle savedInstanceState) { 
        super.onCreate(savedInstanceState); 
        setContentView(R.layout.activity_main); 
 
        textView = findViewById(R.id.textView); 
        editText = findViewById(R.id.editText); 
        Button readButton = findViewById(R.id.readButton); 
        Button writeButton = findViewById(R.id.writeButton); 
 
        // Check for permissions 
        if (ContextCompat.checkSelfPermission(this, 
Manifest.permission.READ_EXTERNAL_STORAGE) != 
PackageManager.PERMISSION_GRANTED 
                || ContextCompat.checkSelfPermission(this, 
Manifest.permission.WRITE_EXTERNAL_STORAGE) != 
PackageManager.PERMISSION_GRANTED) { 
            ActivityCompat.requestPermissions(this, 
                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, 
Manifest.permission.WRITE_EXTERNAL_STORAGE}, 
                    REQUEST_PERMISSION_CODE); 
        } 
 
        // Write File Button 
        writeButton.setOnClickListener(v -> { 
            String userInput = editText.getText().toString(); 
            if (!userInput.isEmpty()) { 
                writeToSDCard(userInput); 
            } else { 
                Toast.makeText(MainActivity.this, "Please enter some text to write", 
Toast.LENGTH_SHORT).show(); 
            } 
        }); 
 
        // Read File Button 
        readButton.setOnClickListener(v -> readFromSDCard()); 
    } 
 
    // Request permissions result 
    @Override 
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] 
grantResults) { 
        super.onRequestPermissionsResult(requestCode, permissions, grantResults); 
        if (requestCode == REQUEST_PERMISSION_CODE) { 
            if (grantResults.length > 0 && grantResults[0] == 
PackageManager.PERMISSION_GRANTED) { 
                Toast.makeText(this, "Permissions granted", Toast.LENGTH_SHORT).show(); 
            } else { 
                Toast.makeText(this, "Permissions denied", Toast.LENGTH_SHORT).show(); 
            } 
        } 
    } 
 
    // Write data to SD Card 
    private void writeToSDCard(String data) { 
        if (isExternalStorageWritable()) { 
            File directory = new File(getExternalFilesDir(null), "MyAppFolder"); 
            if (!directory.exists()) { 
                directory.mkdirs(); 
            } 
            File file = new File(directory, "myfile.txt"); 
 
            try (FileOutputStream fos = new FileOutputStream(file)) { 
                fos.write(data.getBytes()); 
                textView.setText("Data written to SD Card."); 
            } catch (IOException e) { 
                e.printStackTrace(); 
                textView.setText("Error writing to file."); 
            } 
        } else { 
            textView.setText("External Storage not available."); 
        } 
    } 
 
    // Read data from SD Card 
    private void readFromSDCard() { 
        if (isExternalStorageReadable()) { 
            File directory = new File(getExternalFilesDir(null), "MyAppFolder"); 
            File file = new File(directory, "myfile.txt"); 
 
            if (file.exists()) { 
                try (FileInputStream fis = new FileInputStream(file)) { 
                    byte[] data = new byte[(int) file.length()]; 
                    fis.read(data); 
                    textView.setText(new String(data)); 
                } catch (IOException e) { 
                    e.printStackTrace(); 
                    textView.setText("Error reading from file."); 
                } 
            } else { 
                textView.setText("File not found."); 
            } 
        } else { 
            textView.setText("External Storage not available."); 
        } 
    } 
 
    // Check if external storage is writable 
    private boolean isExternalStorageWritable() { 
        String state = Environment.getExternalStorageState(); 
        return Environment.MEDIA_MOUNTED.equals(state); 
    } 
 
    // Check if external storage is readable 
    private boolean isExternalStorageReadable() { 
        String state = Environment.getExternalStorageState(); 
        return Environment.MEDIA_MOUNTED.equals(state) || 
Environment.MEDIA_MOUNTED_READ_ONLY.equals(state); 
    } 
} 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
OUTPUT: 
 
                  
 
                                          
